The State of Go
Where we are in March 2018

Bogdan Prodan
Go Developer at Eleks

bogdan.prodan@eleks.com

* Chronology of Go

Go 1.8 was released more than a year ago

Go 1.9 is already 7 months old

Go 1.10rc1 was released on January 25th

Go 1.10 was released on February 16th

.image img/gopher_flying.jpg 300 450

* Agenda

Changes since Go 1.9:

- Language
- Ports
- Tools
- Core Library
- Performance
- Community

* Language
**
**
**
.image img/no-change.jpg

* Ports
**
.image img/no_change.jpg

* Tools
- Environment
- Build & Install
- Test
- Gofmt

* Environment

`GOPATH` became optional in Go 1.8.

`GOROOT` is now optional too, deduced from the binary path.
(go tool attempts to deduce `GOROOT` from its own executable path)

A new variable `GOTMPDIR` was added to control where temporary files are created.

* Build & Install

- *go* *build* now maintains a caches of recently built packages separately from packages in *pkg*

- `-a` and `-i` are no longer necessary

- thus *go* *build* become *much* faster

* Test

*go* *test* command also now caches test results (use `-count=1`  to disable)

    ➜  go test strings
    ok  	strings	(cached)

Runs *go* *vet* on the package being tested (use `go`test`-vet=off` to disable)

Ability of *-coverpkg* compute coverage of multiple packages

    ➜  go test -coverpkg=all -coverprofile cover.out ./...

New *-failfast* and *-json* flags

* Three-Index Slicing

Did you know you can use three values for slicing?

.play examples/slices.go /START/,/END/

* Three-Index Slicing (cont.)

You can control the capacity of the resulting slice.

.play examples/slices2.go /START/,/END/

* Gofmt

Small change in formatting of three-index slicing expressions.

Before:

    a[i : j:k]

Now:

    a[i : j : k]

* Core Library

No new packages with Go 1.10. All of the changes to the standard library are minor.

* Changes to bytes

The `Fields`, `FieldsFunc`, `Split`, and `SplitAfter` change each returned subslice to have capacity equal to its length, so that appending to one cannot overwrite adjacent data in the original input.

.play examples/bytes.go /START/,/END/
.caption [[https://play.golang.org/p/IkrcKWBP_Vd][playground 1.10]]

* Changes to json

The Decoder adds a new method _DisallowUnknownFields_ that causes it to report inputs with unknown JSON fields as a decoding error.

The default behavior has always been to discard unknown fields.

* Changes to flags

Added appropriate indentation after newlines in flag usage strings, so that multi-line usage strings display nicely.

.play examples/flags.go /START/,/END/

.caption [[https://play.golang.org/p/SVyB5D1YkmF][playground 1.10]]

* Strings

A new type Builder is a replacement for bytes.Buffer for the use case of accumulating text into a string result.
The Builder's API is a restricted subset of bytes.Buffer's that allows it to safely avoid making a duplicate copy of the data during the String method.

.play examples/strings.go /START/,/END/
.caption [[https://play.golang.org/p/laplGq7fblQ][playground 1.10]]

* Strings benchmarks

    func Concat(input string, size int) string {
        var str string
        for n := 0; n < size; n++ {
            str += input
        }
        return str
    }

    func Buffer(input string, size int) string {
        var buffer bytes.Buffer
        for n := 0; n < size; n++ {
            buffer.WriteString(input)
        }
        return buffer.String()
    }

* Strings benchmarks (cont)

    func Copy(input string, size int) string {
        bs := make([]byte, size*len(input))
        length := 0
        for n := 0; n < size; n++ {
            length += copy(bs[length:], input)
        }
        return string(bs)
    }

    func StringBuilder(input string, size int) string {
        var strBuilder strings.Builder
        for n := 0; n < size; n++ {
            strBuilder.WriteString(input)
        }
        return strBuilder.String()
    }
.caption [[https://play.golang.org/p/Ql862xykJDf][playground 1.10]]

* Strings benchmarks (cont 2)

    func benchmark(size int, testFunc func(string, int) string, b *testing.B) {
        for n := 0; n < b.N; n++ {
            testFunc("test", size)
        }
    }

Benchmark functions:

    func BenchmarkConcat2(b *testing.B)             { benchmark(2, Concat, b) }
    func BenchmarkConcat100(b *testing.B)           { benchmark(100, Concat, b) }
    func BenchmarkConcat100000(b *testing.B)        { benchmark(100000, Concat, b) }

    func BenchmarkBuffer2(b *testing.B)             { benchmark(2, Buffer, b) }
    ...

    func BenchmarkCopy2(b *testing.B)               { benchmark(2, Copy, b) }
    ...

    func BenchmarkBuilder2(b *testing.B)            { benchmark(2, StringBuilder, b) }
    ...

* Strings benchmarks output

    BenchmarkConcat2-4         	30000000	        46.7 ns/op	       8 B/op	       1 allocs/op
    BenchmarkConcat100-4       	  200000	     12051 ns/op	   21096 B/op	      99 allocs/op
    BenchmarkConcat100000-4    	       1	4210300196 ns/op	20384408176 B/op	  100011 allocs/op
    BenchmarkBuffer2-4         	20000000	        89.4 ns/op	     120 B/op	       2 allocs/op
    BenchmarkBuffer100-4       	 1000000	      1419 ns/op	    1536 B/op	       5 allocs/op
    BenchmarkBuffer100000-4    	    2000	    951513 ns/op	 1528288 B/op	      15 allocs/op
    BenchmarkCopy2-4           	30000000	        43.6 ns/op	      16 B/op	       2 allocs/op
    BenchmarkCopy100-4         	 3000000	       598 ns/op	     832 B/op	       2 allocs/op
    BenchmarkCopy100000-4      	    3000	    464300 ns/op	  802816 B/op	       2 allocs/op
    BenchmarkBuilder2-4        	30000000	        42.4 ns/op	       8 B/op	       1 allocs/op
    BenchmarkBuilder100-4      	 1000000	      1313 ns/op	    1016 B/op	       7 allocs/op
    BenchmarkBuilder100000-4   	    1000	   1683545 ns/op	 2299899 B/op	      31 allocs/op

* Performance

As always, the changes are so general and varied that precise statements about performance are difficult to make.
Most programs should run a bit faster, due to speedups in the garbage collector, better generated code, and optimizations in the core library.

* Garbage Collector Performance

* go 1.9 (beta 1)

.image img/gct6.png _ 800

* go 1.10

.image img/gct7.png _ 550
.image img/gct7tweet.png _ 500

* Release notes

If you want to read complete information on things that have changed please visit [[https://golang.org/doc/go1.10]]

Sources
[[https://github.com/bogdanprodanj/state-of-go-1.10]]

* Community - Upcoming Conferences

- GopherCon 2018, Shanghai, China, [[http://www.gopherchina.org]]
- GothamGo 2018, New York, USA, [[http://gothamgo.com]]
- GopherCon SG 2018, Singapore, [[https://2018.gophercon.sg]]
- GopherCon Europe, Reykjavik, Iceland, [[https://gophercon.is]]
- GopherCon Denver 2018, Denver, CO, [[http://gophercon.com]]
- GopherCon Brasil 2018, Florianópolis, Brazil, [[https://2018.gopherconbr.org/en]]
- GoLab 2018, Florence, Italy, [[http://golab.io]]
- dotGo 2019, Paris, France, [[https://2019.dotgo.eu]]

[[https://github.com/golang/go/wiki/Conferences][List of all Go conferences]]


* End!
.image img/mic.png 500 _
